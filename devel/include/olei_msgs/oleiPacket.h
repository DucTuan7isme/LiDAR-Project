// Generated by gencpp from file olei_msgs/oleiPacket.msg
// DO NOT EDIT!


#ifndef OLEI_MSGS_MESSAGE_OLEIPACKET_H
#define OLEI_MSGS_MESSAGE_OLEIPACKET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace olei_msgs
{
template <class ContainerAllocator>
struct oleiPacket_
{
  typedef oleiPacket_<ContainerAllocator> Type;

  oleiPacket_()
    : stamp()
    , data()  {
      data.assign(0);
  }
  oleiPacket_(const ContainerAllocator& _alloc)
    : stamp()
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef boost::array<uint8_t, 1240>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::olei_msgs::oleiPacket_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::olei_msgs::oleiPacket_<ContainerAllocator> const> ConstPtr;

}; // struct oleiPacket_

typedef ::olei_msgs::oleiPacket_<std::allocator<void> > oleiPacket;

typedef boost::shared_ptr< ::olei_msgs::oleiPacket > oleiPacketPtr;
typedef boost::shared_ptr< ::olei_msgs::oleiPacket const> oleiPacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::olei_msgs::oleiPacket_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::olei_msgs::oleiPacket_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::olei_msgs::oleiPacket_<ContainerAllocator1> & lhs, const ::olei_msgs::oleiPacket_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::olei_msgs::oleiPacket_<ContainerAllocator1> & lhs, const ::olei_msgs::oleiPacket_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace olei_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::olei_msgs::oleiPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::olei_msgs::oleiPacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::olei_msgs::oleiPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::olei_msgs::oleiPacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::olei_msgs::oleiPacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::olei_msgs::oleiPacket_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::olei_msgs::oleiPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3af84facd1013c90b679a5bc5454fd6";
  }

  static const char* value(const ::olei_msgs::oleiPacket_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3af84facd1013c9ULL;
  static const uint64_t static_value2 = 0x0b679a5bc5454fd6ULL;
};

template<class ContainerAllocator>
struct DataType< ::olei_msgs::oleiPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "olei_msgs/oleiPacket";
  }

  static const char* value(const ::olei_msgs::oleiPacket_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::olei_msgs::oleiPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Raw olei LIDAR packet.\n"
"\n"
"time stamp              # packet timestamp\n"
"uint8[1240] data        # packet contents\n"
"\n"
;
  }

  static const char* value(const ::olei_msgs::oleiPacket_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::olei_msgs::oleiPacket_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct oleiPacket_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::olei_msgs::oleiPacket_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::olei_msgs::oleiPacket_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OLEI_MSGS_MESSAGE_OLEIPACKET_H
